import requests
import json
import os
from pathlib import Path
import re

PLAYLIST_URLS = {
    "http://epg.one/edem_epg_ico.m3u8": "standard.m3u8",
    "http://epg.one/edem_epg_ico2.m3u8": "thematic_1.m3u8",
    "http://epg.one/edem_epg_ico3.m3u8": "thematic_2.m3u8"
}

ICONS_MAP_URL = "https://raw.githubusercontent.com/Lorax121/epg_v2/main/icons_map.json"

OLD_EPG_URL = '#EXTM3U x-tvg-url="http://epg.one/epg.xml.gz"'
NEW_EPG_URL = '#EXTM3U x-tvg-url="https://raw.githubusercontent.com/Lorax121/epg_v2/main/data/epg.xml.gz"'

NEW_ICONS_BASE_URL = "https://raw.githubusercontent.com/Lorax121/epg_v2/main/"

OUTPUT_DIR = "playlists"

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")

    repo_name = os.getenv('GITHUB_REPOSITORY')
    if not repo_name:
        raise ValueError("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_REPOSITORY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    output_path = Path(OUTPUT_DIR)
    output_path.mkdir(exist_ok=True)
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: '{OUTPUT_DIR}'")

    try:
        print(f"üîÑ –°–∫–∞—á–∏–≤–∞—é –∫–∞—Ä—Ç—É –∏–∫–æ–Ω–æ–∫ —Å: {ICONS_MAP_URL}")
        response = requests.get(ICONS_MAP_URL, timeout=30)
        response.raise_for_status()
        icons_data = response.json()
        icon_pool = icons_data.get("icon_pool", {})
        if not icon_pool:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 'icon_pool' –≤ –∫–∞—Ä—Ç–µ –∏–∫–æ–Ω–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        else:
            print(f"‚úÖ –ö–∞—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(icon_pool)} –∏–∫–æ–Ω–æ–∫ –≤ 'icon_pool'.")
    except requests.RequestException as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∫–æ–Ω–æ–∫: {e}")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –∏–∑ –∫–∞—Ä—Ç—ã –∏–∫–æ–Ω–æ–∫: {e}")
        return

    processed_files = []
    for url, filename in PLAYLIST_URLS.items():
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞: {filename} ---")
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç —Å: {url}")
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            playlist_lines = response.text.splitlines()

            if playlist_lines and OLD_EPG_URL in playlist_lines[0]:
                 playlist_lines[0] = NEW_EPG_URL
                 print("üîß –ó–∞–º–µ–Ω–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ EPG.")
            
            replacements_count = 0
            processed_lines = []
            for line in playlist_lines:
                if 'tvg-logo="' in line:
                    match = re.search(r'tvg-logo="([^"]+)"', line)
                    if match:
                        old_icon_url = match.group(1)
                        if old_icon_url in icon_pool:
                            new_icon_path = icon_pool[old_icon_url]
                            full_new_icon_url = f"{NEW_ICONS_BASE_URL}{new_icon_path}"
                            line = line.replace(old_icon_url, full_new_icon_url)
                            replacements_count += 1
                processed_lines.append(line)

            if replacements_count > 0:
                print(f"üñºÔ∏è –ó–∞–º–µ–Ω–∏–ª {replacements_count} —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∫–æ–Ω–∫–∏.")
            else:
                print("‚ÑπÔ∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–∫–æ–Ω–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            playlist_content = "\n".join(processed_lines)
            
            file_path = output_path / filename
            file_path.write_text(playlist_content, encoding='utf-8')
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            processed_files.append(filename)

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

    print("\n--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md ---")
    update_readme(processed_files, repo_name)
    print("‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    print("\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

def update_readme(playlist_files, repo_name):
    readme_content = [
        "# üì∫ –ó–µ—Ä–∫–∞–ª–æ —à–∞–±–ª–æ–Ω–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –æ—Ç epg.one —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n",
        "–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤, –∑–∞–º–µ–Ω—è—è —Å—Å—ã–ª–∫–∏ –Ω–∞ EPG –∏ –∏–∫–æ–Ω–∫–∏ –∫–∞–Ω–∞–ª–æ–≤.\n",
        "–ó–∞–º–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Å—ã–ª–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: https://github.com/Lorax121/epg_v2",
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.\n",
        "## üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã:\n"
    ]

    base_url = f"https://raw.githubusercontent.com/{repo_name}/main/{OUTPUT_DIR}/"

    for filename in sorted(playlist_files):
        playlist_name = Path(filename).stem.replace('_', ' ').capitalize()
        full_url = f"{base_url}{filename}"
        readme_content.append(f"* **{playlist_name}**")
        readme_content.append(f"  ```\n  {full_url}\n  ```")

    readme_path = Path("README.md")
    readme_path.write_text("\n".join(readme_content), encoding='utf-8')

if __name__ == "__main__":
    main()
